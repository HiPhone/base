user  nginx nginx;      #定义用户和用户组
worker_processes  auto;     #Nginx可以开启的子进程的数量，一般与cpu核心数一致
error_log  logs/error.log error;   #Nginx错误日志存放的目录及错误级别设置[debug|info|notice|warn|error|crit]       

pid        logs/nginx.pid;    #Nginx.pid存放的目录，用于管理Nginx进程
  
worker_rlimit_nofile  65535;     #相当于open files的数量，可大于系统配置的open files
events {
    use epoll;              #使用的网络I/O模型，Linux系统使用epoll模型
    worker_connections  65535;   #单个进程最大连接数=worker连接数*worker进程数
}
 
http {
     
    default_type  application/octet-stream;          #默认文件类型
    #charset utf‐8; #默认编码
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '     #定义访问日志输出的格式
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
  
    include       mime.types;              #文件扩展名与文件类型映射表

    #inclue 也可以include xxx.conf 把Nginx的配置写到另外一个.conf文件中，用Include导入，实现低耦合
    server_tokens off;                    #隐藏响应header和错误通知中的版本号
    server_names_hash_bucket_size 128;    #服务器名字的hash表大小
    server_names_hash_max_size 512;       #服务器域名的最大hash表大小
    client_header_buffer_size 32k;        #上传文件大小限制
    large_client_header_buffers 4 64k;    #设定请求头缓存大小
    client_max_body_size 8m;              #设定请求体缓存大小
    sendfile on;                          #开启高效文件传输模式
    autoindex on;                         #开启目录列表访问，合适下载服务器，默认关闭。
    tcp_nopush on;                        #开启能减少网络报文段得数量
    tcp_nodelay on;                       #开启之后内核会等待将更多的字节组成一个数据包，从而提高I/O性能
    keepalive_timeout 120;                #连接超时时间，单位是秒
    autoindex off;                        #目录列表访问参数，适合Http下载
    client_header_timeout 15s;            #读取客户端请求头的超时时间
    client_body_timeout 60s;              #读取客户端请求体的超时时间
    send_timeout  60s;                    #设置服务器端传送http响应信息到客户端的超时时间

    #FastCGI相关参数是为了改善基于PHP网站的性能：减少资源占用，提高访问速度
    fastcgi_connect_timeout 300;          #设定Nginx服务器和后端fastcgi服务器连接的超时时间
    fastcgi_send_timeout 300;             #设定Nginx允许fastcgi服务端返回数据的超时时间
    fastcgi_read_timeout 300;             #设定Nginx从fastcgi服务端读取响应信息的超时时间
    fastcgi_buffer_size 64k;              #设定用来读取从FastCGI服务端收到的第一部分响应信息的缓冲区大小
    fastcgi_buffers 4 64k;                #设定用来读取从FastCGI服务端收到的响应信息的缓冲区大小以及缓冲区数量
    fastcgi_busy_buffers_size 128k;       #设定系统很忙时可以使用的fastcgi_buffers大小，推荐大小为fastcgi_buffers的两倍。
    fastcgi_temp_file_write_size 128k;    #fastcti临时文件的大小，可设置128-256K
    #access_log  logs/access.log  main;   #定义访问日志存放点且开启访问日志
    #access_log off;                      #关闭访问日志输出到access.log中

    #gzip压缩模块设置
    gzip on;                              #开启gzip压缩输出
    gzip_min_length 1k;                   #最小压缩文件大小
    gzip_buffers 4 16k;                   #压缩缓冲区
    gzip_http_version 1.1;                #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
    gzip_comp_level 2; #压缩等级
     
    #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。
    gzip_types text/plain application/x‐javascript text/css application/xml;
    gzip_vary on;                        #让前端的缓存服务器缓存经过GZIP压缩的页面
    #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用
    upstream node {
    #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。
        ip_hash;                         #调度算法，默认是round robin
        server 127.0.0.1:9090  weight=3;   #weight为权重，权重高的服务器数据接收量和数据接收优先级高
        server 127.0.0.1:9091  weight=2;
        server 127.0.0.1:9092  backup;     #热备
    }
    server {
        listen       8085;                #监听端口
        server_name  localhost;           #主机名称
        
        #access_log  logs/host.access.log  main;
        root   /var/www/html;             #静态文件存放目录
        index  index.html index.htm index.php;      #首页排序
 
        location /citiccard/wtk/post {    #反向代理
            proxy_pass http://node;       #对应上面的upstream模块
        }
        #error_page  404              /404.html;
        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    #图片缓存时间设置
    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$ {
        expires 10d;
    }
    #JS和CSS缓存时间设置
    location ~ .*.(js|css)?$
    {
        expires 1h;
    }
    #对 "/" 启用反向代理
    location / {
        proxy_pass http://127.0.0.1:88;
            proxy_redirect off;
        #后端的Web服务器可以通过X‐Forwarded‐For获取用户真实IP
        proxy_set_header X‐Real‐IP $remote_addr;
        proxy_set_header X‐Forwarded‐For $proxy_add_x_forwarded_for;
     
        #以下是一些反向代理的配置，适用于任何location,可选。
        proxy_set_header Host $host;
        client_max_body_size 10m;           #允许客户端请求的最大单文件字节数
        client_body_buffer_size 128k;       #缓冲区代理缓冲用户端请求的最大字节数，
        proxy_connect_timeout 90;           #nginx跟后端服务器连接超时时间(代理连接超时)
        proxy_send_timeout 90;      #后端服务器数据回传时间(代理发送超时)
        proxy_read_timeout 90;      #连接成功后，后端服务器响应时间(代理接收超时)
        proxy_buffer_size 4k;               #设置代理服务器（nginx）保存用户头信息的缓冲区大小
        proxy_buffers 4 32k;                #proxy_buffers缓冲区，网页平均在32k以下的设置
        proxy_busy_buffers_size 64k;        #高负荷下缓冲大小（proxy_buffers*2）
        proxy_temp_file_write_size 64k;     #设定缓存文件夹大小，大于这个值，将从upstream服务器传
    }
        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}
        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}
        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
 
    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;
    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
 
    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;
    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;
    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
}